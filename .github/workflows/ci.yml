name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

env:
  NODE_VERSION: '20.x'

jobs:
  # Code Quality Checks (runs in parallel)
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run ESLint
      run: yarn lint
      
    - name: Check Prettier formatting
      run: yarn format --check
      
    - name: TypeScript type checking
      run: yarn check

  # Security Audit (runs in parallel)
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run security audit
      run: yarn audit --level moderate
      continue-on-error: true

  # Test and Build (runs after quality checks)
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest
    needs: [lint-and-format]  # Only run after code quality passes
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run tests
      run: yarn test
      env:
        NODE_ENV: test
        
    - name: Build application
      run: yarn build
      
    - name: Upload test coverage (Node 20 only)
      if: matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 7

  # Docker Build (only for master branch and after tests pass)
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test-and-build]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: docker build -t sprint-sync-api:latest .
        
    - name: Test Docker image
      run: |
        # Start container in background
        docker run --rm -d --name test-container \
          -p 3000:3000 \
          -e NODE_ENV=production \
          -e DB_NAME=test \
          -e DB_MIN_POOL_SIZE=1 \
          -e DB_MAX_POOL_SIZE=2 \
          -e PORT=3000 \
          -e JWT_SECRET=test-secret \
          -e JWT_ISSUER=test \
          -e JWT_AUDIENCE=test \
          -e JWT_ACCESS_TOKEN_VALIDITY=3600 \
          -e JWT_REFRESH_TOKEN_VALIDITY=86400 \
          -e LOG_DIR=/tmp/logs \
          -e CORS_URL=http://localhost:3000 \
          -e APP_API_KEY=test-key \
          -e EXPRESS_LIMIT=100mb \
          sprint-sync-api:latest
          
        # Wait for container to start
        echo "Waiting for container to start..."
        sleep 20
        
        # Check if container is running
        docker ps | grep test-container
        
        # Test health endpoint
        for i in {1..10}; do
          if curl -f http://localhost:3000/api/health; then
            echo "✅ Health check passed"
            break
          else
            echo "❌ Health check failed, attempt $i/10"
            if [ $i -eq 10 ]; then
              echo "🔍 Container logs:"
              docker logs test-container
              exit 1
            fi
            sleep 5
          fi
        done
        
        # Cleanup
        docker stop test-container

  # PR-specific checks
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for commit message validation
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Validate commit messages
      uses: wagoid/commitlint-github-action@v5

  # Summary job (always runs)
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-audit, test-and-build, docker-build, pr-validation]
    if: always()
    
    steps:
    - name: Generate Summary
      run: |
        echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.lint-and-format.result == 'success' && '✅ Passed' || needs.lint-and-format.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Passed' || needs.security-audit.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test & Build | ${{ needs.test-and-build.result == 'success' && '✅ Passed' || needs.test-and-build.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅ Passed' || needs.docker-build.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| PR Validation | ${{ needs.pr-validation.result == 'success' && '✅ Passed' || needs.pr-validation.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine overall status
        OVERALL_STATUS="✅ Success"
        if [[ "${{ needs.lint-and-format.result }}" == "failure" || "${{ needs.test-and-build.result }}" == "failure" ]]; then
          OVERALL_STATUS="❌ Failed"
        elif [[ "${{ needs.docker-build.result }}" == "failure" && "${{ needs.docker-build.result }}" != "skipped" ]]; then
          OVERALL_STATUS="❌ Failed"
        elif [[ "${{ needs.pr-validation.result }}" == "failure" && "${{ needs.pr-validation.result }}" != "skipped" ]]; then
          OVERALL_STATUS="❌ Failed"
        fi
        
        echo "**Overall Status: $OVERALL_STATUS**" >> $GITHUB_STEP_SUMMARY
        
        if [[ "$OVERALL_STATUS" == "❌ Failed" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❗ **Action Required**: Please check the failed jobs above and fix the issues." >> $GITHUB_STEP_SUMMARY
        fi